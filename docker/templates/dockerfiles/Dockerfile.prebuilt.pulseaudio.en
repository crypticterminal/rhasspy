ARG BUILD_FROM
FROM $BUILD_FROM
LABEL maintainer="Michael Hansen <hansen.mike@gmail.com>"

ARG BUILD_ARCH
ENV LANG C.UTF-8

ARG MAKE_THREADS=4

WORKDIR /

RUN apt-get update && \
    apt-get install -y bash jq unzip \
                       build-essential portaudio19-dev swig \
                       libatlas-base-dev \
                       sox espeak flite alsa-utils \
                       git \
                       autoconf libtool automake bison \
                       sphinxbase-utils sphinxtrain

COPY etc/phonetisaurus_20190304-1_${BUILD_ARCH}.deb /phonetisaurus.deb
RUN dpkg -i /phonetisaurus.deb && \
    rm /phonetisaurus.deb

# Install mitlm
RUN apt-get install -y gfortran
COPY etc/mitlm-0.4.2.tar.xz /
RUN cd / && tar -xf mitlm-0.4.2.tar.xz && cd mitlm-0.4.2/ && \
    ./configure && \
    make -j $MAKE_THREADS && \
    make install && \
    rm -rf /mitlm-0.4.2*

# Install Python dependencies
RUN python3 -m pip install --no-cache-dir wheel
COPY requirements.txt /requirements.txt
RUN python3 -m pip install --no-cache-dir -r /requirements.txt

# Install Pocketsphinx Python module with no sound
COPY etc/pocketsphinx-python.tar.gz /
RUN python3 -m pip install --no-cache-dir /pocketsphinx-python.tar.gz && \
    rm -rf /pocketsphinx-python*

# Install fixed PyJSGF library
COPY etc/pyjsgf-20190226.zip /
RUN python3 -m pip install /pyjsgf-20190226.zip && \
    rm /pyjsgf-20190226.zip

# Install snowboy
COPY etc/snowboy-1.3.0.tar.gz /
RUN if [ "$BUILD_ARCH" != "aarch64" ]; then pip3 install --no-cache-dir /snowboy-1.3.0.tar.gz; fi

# Install Mycroft Precise
COPY etc/precise-engine_0.2.0_${BUILD_ARCH}.tar.gz /precise-engine.tar.gz
RUN cd / && tar -xzf /precise-engine.tar.gz && \
    ln -s /precise-engine/precise-engine /usr/bin/precise-engine && \
    rm /precise-engine.tar.gz

RUN ldconfig

# Copy bw and mllr_solve to /usr/bin
RUN find / -name bw -exec cp '{}' /usr/bin/ \;
RUN find / -name mllr_solve -exec cp '{}' /usr/bin/ \;

RUN apt-get install -y pulseaudio
COPY etc/pulseaudio.client.conf /etc/pulse/client.conf

# Create new user
ENV UNAME=rhasspy
RUN export UNAME=$UNAME UID=1000 GID=1000 && \
    mkdir -p "/home/${UNAME}" && \
    echo "${UNAME}:x:${UID}:${GID}:${UNAME} User,,,:/home/${UNAME}:/bin/bash" >> /etc/passwd && \
    echo "${UNAME}:x:${UID}:" >> /etc/group && \
    mkdir -p /etc/sudoers.d && \
    echo "${UNAME} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${UNAME} && \
    chmod 0440 /etc/sudoers.d/${UNAME} && \
    chown ${UID}:${GID} -R /home/${UNAME} && \
    gpasswd -a ${UNAME} audio

ENV RHASSPY_APP /home/${UNAME}

# Copy script to run
COPY docker/run.sh /run.sh
RUN chmod +x /run.sh

# Switch to new user
USER $UNAME
ENV HOME /home/${UNAME}

COPY profiles/en/ ${RHASSPY_APP}/profiles/en/

COPY profiles/defaults.json /home/rhasspy/profiles/
COPY docker/rhasspy /home/rhasspy/bin/
COPY dist/ /home/rhasspy/dist/
COPY etc/wav/* /home/rhasspy/etc/wav/
COPY rhasspy/profile_schema.json /home/rhasspy/rhasspy/
COPY *.py /home/rhasspy/
COPY rhasspy/*.py /home/rhasspy/rhasspy/

ENV CONFIG_PATH /data/options.json

ENTRYPOINT ["/run.sh"]